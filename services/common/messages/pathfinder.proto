/*
 * Messages for the Pathfinder Service.
 *
 * Mostly just bundles of existing messages.
 */

syntax = "proto3";

package pathfinder;

/*
 * The Pathfinder service takes:
 *  - the current Flyzones: [[Loc]]
 *      where Loc: (lat, lon, alt)
 *  - current Obstacles: [(Loc, rad, height)]
 *      where Loc: (lat, lon, alt)
 *  - Plane's position: (Loc, yaw, pitch, roll, airspeed, ground_speed, wind_dir)
 *      where Loc: (lat, lon, alt)
 *  - the current Waypoints: [(idx, Loc, rad)]
 *      where Loc: (lat, lon, alt)
 */

// Let's start with Flyzones. There's already a definition for this in
// interop.proto; a Flyzone consists of a list of Positions.
import "messages/interop.proto";

// Next, Obstacles. Stationary Obstacle is mostly one-to-one with the
// service's Obstacle, so we'll just use that. `time` and `moving` in Obstacles
// can be discarded.

// Position is a little more messy. We end up needing to string together
// Position and Altitude from telemetry.proto to get the fields in the
// Service's location. `yaw`, `pitch`, and `roll` can be sourced from Rotation,
// and finally Speed gets us `airspeed` and `ground_speed`. `wind_dir` we don't
// have a source for yet so we'll just ignore it for now (TODO).
import "messages/telemetry.proto";

// Everything in the list of Waypoints can be sourced from a RawMission (also
// telemetry.proto).

message Request {
    // Flyzones:
    repeated interop.InteropMission.FlyZone flyzones = 1;

    // Obstacles:
    interop.Obstacles obstacles = 2;

    // Plane's Position:
    telemetry.Position plane_pos = 3;
    telemetry.Altitude plane_alt = 4;
    telemetry.Rotation plane_rot = 5;
    telemetry.Speed plane_speed = 6;

    // Current Waypoints:
    telemetry.RawMission mission = 7;

    // Finally, config options:
    double buffer_size = 8;  // optional
    uint32 process_time = 9; // optional
}

// The Pathfinder service returns a list of (adjusted) Waypoints. We'll want
// to turn these into a RawMission for external consumption.
//
// For fun we can throw in a couple of other fields:
//   - time_to_adjust // Time, in seconds, it took to adjust the path

message Response {
    // New Waypoints:
    telemetry.RawMission mission = 1;

    // Fun extras:
    double time_to_adjust = 2;
}

// TODO: messages for stateful requests

// message SetBufferSize {}

// message StatefulRequest {
//     // new waypoints
//     // new plane pos
// }

// message UpdateFlyzone {}

// message UpdateObstacles {}

// Edge case: can't call StatefulResponse if the fields aren't set...
