/*
 * Messages for the Pathfinder Service.
 *
 * Mostly just bundles of existing messages.
 */

syntax = "proto3";

package pathfinder;

/*
 * The Pathfinder service takes:
 *  - the current Flyzones: [[Loc]]
 *      where Loc: (lat, lon, alt)
 *  - current Obstacles: [(Loc, rad, height)]
 *      where Loc: (lat, lon, alt)
 *  - Plane's position: (Loc, yaw, pitch, roll, airspeed, ground_speed, wind_dir)
 *      where Loc: (lat, lon, alt)
 *  - the current Waypoints: [(idx, Loc, rad)]
 *      where Loc: (lat, lon, alt)
 */

// Let's start with Flyzones. There's already a definition for this in
// interop.proto; a Flyzone consists of a list of Positions.
import "messages/interop.proto";

// Next, Obstacles. Stationary Obstacle is mostly one-to-one with the
// service's Obstacle, so we'll just use that. `time` and `moving` in Obstacles
// can be discarded.

// Position is a little more messy. We end up needing to string together
// Position and Altitude from telemetry.proto to get the fields in the
// Service's location. `yaw`, `pitch`, and `roll` can be sourced from Rotation,
// and finally Speed gets us `airspeed` and `ground_speed`. `wind_dir` we don't
// have a source for yet so we'll just ignore it for now (TODO).
import "messages/telemetry.proto";

// Everything in the list of Waypoints can be sourced from a RawMission (also
// telemetry.proto).

message Plane {
    telemetry.Position pos = 1;
    telemetry.Altitude alt = 2;
    telemetry.Rotation rot = 3; // Only used for yaw, currently
    telemetry.Velocity vel = 4; // Not currently used
    telemetry.Speed speed = 5;  // Not currently used
}

message Request {
    // Flyzones:
    repeated interop.InteropMission.FlyZone flyzones = 1;

    // Obstacles:
    // Could just be a list of stationary obstacles, but we'll leave it like
    // this in case moving obstacles ever make a return.
    interop.Obstacles obstacles = 2;

    // Plane's Position (and other data; speed & velocity are currently unused):
    telemetry.Overview overview = 3;

    // Current Waypoints:
    telemetry.RawMission mission = 4;

    // Finally, config options:
    double buffer_size = 5;  // optional
    uint32 process_time = 6; // optional
    string algorithm = 7;    // optional
}

// The Pathfinder service returns a list of (adjusted) Waypoints. We'll want to
// turn these into a RawMission for external consumption.
//
// For fun we can throw in a couple of other fields:
//   - time_to_adjust // Time, in seconds, it took to adjust the path

message Response {
    // New Waypoints:
    telemetry.RawMission mission = 1;

    // Fun extras:
    double time_to_adjust = 2;
}

// The last thing we have to watch out for is units.
//
// ┌───────────┰────────────┬───────────┬───────────┐
// │           ┃ Pathfinder │  Interop  │ Telemetry │
// ┝━━━━━━━━━━━╋━━━━━━━━━━━━┿━━━━━━━━━━━┿━━━━━━━━━━━┥
// │ altitude  ┃            │           │           │
// │ latitude  ┃            │           │           │
// │ longitude ┃            │           │           │
// │ radius    ┃            │           │           │
// │ yaw       ┃            │           │           │
// │ pitch     ┃            │           │           │
// │ roll      ┃            │           │           │
// │ air sp    ┃            │           │           │
// │ wind dir  ┃            │           │           │
// │ ground sp ┃            │           │           │
// │           ┃            │           │           │
// └───────────┸────────────┴───────────┴───────────┘
//



// message UpdateFlyzone {}

// message UpdateObstacles {}

// Edge case: can't call StatefulResponse if the fields aren't set...
